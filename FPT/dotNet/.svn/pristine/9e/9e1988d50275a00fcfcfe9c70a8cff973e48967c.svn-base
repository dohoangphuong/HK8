//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CertMClient.CertMServiceData {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CERTIFICATE", Namespace="http://schemas.datacontract.org/2004/07/CertMService")]
    [System.SerializableAttribute()]
    public partial class CERTIFICATE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CertMClient.CertMServiceData.ACCOUNT ACCOUNTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CertMClient.CertMServiceData.CLASS CLASSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CertNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MajorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<CertMClient.CertMServiceData.SCOREBOARD> SCOREBOARDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CertMClient.CertMServiceData.ACCOUNT ACCOUNT {
            get {
                return this.ACCOUNTField;
            }
            set {
                if ((object.ReferenceEquals(this.ACCOUNTField, value) != true)) {
                    this.ACCOUNTField = value;
                    this.RaisePropertyChanged("ACCOUNT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CertMClient.CertMServiceData.CLASS CLASS {
            get {
                return this.CLASSField;
            }
            set {
                if ((object.ReferenceEquals(this.CLASSField, value) != true)) {
                    this.CLASSField = value;
                    this.RaisePropertyChanged("CLASS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CertNo {
            get {
                return this.CertNoField;
            }
            set {
                if ((object.ReferenceEquals(this.CertNoField, value) != true)) {
                    this.CertNoField = value;
                    this.RaisePropertyChanged("CertNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClassNo {
            get {
                return this.ClassNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassNoField, value) != true)) {
                    this.ClassNoField = value;
                    this.RaisePropertyChanged("ClassNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Link {
            get {
                return this.LinkField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkField, value) != true)) {
                    this.LinkField = value;
                    this.RaisePropertyChanged("Link");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Major {
            get {
                return this.MajorField;
            }
            set {
                if ((object.ReferenceEquals(this.MajorField, value) != true)) {
                    this.MajorField = value;
                    this.RaisePropertyChanged("Major");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Place {
            get {
                return this.PlaceField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaceField, value) != true)) {
                    this.PlaceField = value;
                    this.RaisePropertyChanged("Place");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Rank {
            get {
                return this.RankField;
            }
            set {
                if ((object.ReferenceEquals(this.RankField, value) != true)) {
                    this.RankField = value;
                    this.RaisePropertyChanged("Rank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<CertMClient.CertMServiceData.SCOREBOARD> SCOREBOARD {
            get {
                return this.SCOREBOARDField;
            }
            set {
                if ((object.ReferenceEquals(this.SCOREBOARDField, value) != true)) {
                    this.SCOREBOARDField = value;
                    this.RaisePropertyChanged("SCOREBOARD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ACCOUNT", Namespace="http://schemas.datacontract.org/2004/07/CertMService")]
    [System.SerializableAttribute()]
    public partial class ACCOUNT : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<CertMClient.CertMServiceData.CERTIFICATE> CERTIFICATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<CertMClient.CertMServiceData.CERTIFICATE> CERTIFICATE {
            get {
                return this.CERTIFICATEField;
            }
            set {
                if ((object.ReferenceEquals(this.CERTIFICATEField, value) != true)) {
                    this.CERTIFICATEField = value;
                    this.RaisePropertyChanged("CERTIFICATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CLASS", Namespace="http://schemas.datacontract.org/2004/07/CertMService")]
    [System.SerializableAttribute()]
    public partial class CLASS : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<CertMClient.CertMServiceData.CERTIFICATE> CERTIFICATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LinkField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<CertMClient.CertMServiceData.CERTIFICATE> CERTIFICATE {
            get {
                return this.CERTIFICATEField;
            }
            set {
                if ((object.ReferenceEquals(this.CERTIFICATEField, value) != true)) {
                    this.CERTIFICATEField = value;
                    this.RaisePropertyChanged("CERTIFICATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClassNo {
            get {
                return this.ClassNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassNoField, value) != true)) {
                    this.ClassNoField = value;
                    this.RaisePropertyChanged("ClassNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Link {
            get {
                return this.LinkField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkField, value) != true)) {
                    this.LinkField = value;
                    this.RaisePropertyChanged("Link");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SCOREBOARD", Namespace="http://schemas.datacontract.org/2004/07/CertMService")]
    [System.SerializableAttribute()]
    public partial class SCOREBOARD : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CertMClient.CertMServiceData.CERTIFICATE CERTIFICATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CertNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MarkField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CertMClient.CertMServiceData.CERTIFICATE CERTIFICATE {
            get {
                return this.CERTIFICATEField;
            }
            set {
                if ((object.ReferenceEquals(this.CERTIFICATEField, value) != true)) {
                    this.CERTIFICATEField = value;
                    this.RaisePropertyChanged("CERTIFICATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CertNo {
            get {
                return this.CertNoField;
            }
            set {
                if ((object.ReferenceEquals(this.CertNoField, value) != true)) {
                    this.CertNoField = value;
                    this.RaisePropertyChanged("CertNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Mark {
            get {
                return this.MarkField;
            }
            set {
                if ((this.MarkField.Equals(value) != true)) {
                    this.MarkField = value;
                    this.RaisePropertyChanged("Mark");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TEMPLATE", Namespace="http://schemas.datacontract.org/2004/07/CertMService")]
    [System.SerializableAttribute()]
    public partial class TEMPLATE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FrontLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndLink {
            get {
                return this.EndLinkField;
            }
            set {
                if ((object.ReferenceEquals(this.EndLinkField, value) != true)) {
                    this.EndLinkField = value;
                    this.RaisePropertyChanged("EndLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FrontLink {
            get {
                return this.FrontLinkField;
            }
            set {
                if ((object.ReferenceEquals(this.FrontLinkField, value) != true)) {
                    this.FrontLinkField = value;
                    this.RaisePropertyChanged("FrontLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Generator.ExportOption", Namespace="http://schemas.datacontract.org/2004/07/CertMServiceLib.Generator")]
    public enum GeneratorExportOption : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Front = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Back = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkingState", Namespace="http://schemas.datacontract.org/2004/07/CertMServiceLib")]
    public enum WorkingState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Idle = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Working = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CertMServiceData.ICertMService")]
    public interface ICertMService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/SizePageSearch", ReplyAction="http://tempuri.org/ICertMService/SizePageSearchResponse")]
        int SizePageSearch(int Option, string Value, string Rank, string Place, int PageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/SizePageSearch", ReplyAction="http://tempuri.org/ICertMService/SizePageSearchResponse")]
        System.Threading.Tasks.Task<int> SizePageSearchAsync(int Option, string Value, string Rank, string Place, int PageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/SearchCert", ReplyAction="http://tempuri.org/ICertMService/SearchCertResponse")]
        System.Collections.Generic.List<CertMClient.CertMServiceData.CERTIFICATE> SearchCert(int Option, string Value, string Rank, string Place, int Page, int PageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/SearchCert", ReplyAction="http://tempuri.org/ICertMService/SearchCertResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<CertMClient.CertMServiceData.CERTIFICATE>> SearchCertAsync(int Option, string Value, string Rank, string Place, int Page, int PageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/GetScoreBoard", ReplyAction="http://tempuri.org/ICertMService/GetScoreBoardResponse")]
        System.Collections.Generic.List<CertMClient.CertMServiceData.SCOREBOARD> GetScoreBoard(string CertNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/GetScoreBoard", ReplyAction="http://tempuri.org/ICertMService/GetScoreBoardResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<CertMClient.CertMServiceData.SCOREBOARD>> GetScoreBoardAsync(string CertNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/DeleteClass", ReplyAction="http://tempuri.org/ICertMService/DeleteClassResponse")]
        bool DeleteClass(string ClassNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/DeleteClass", ReplyAction="http://tempuri.org/ICertMService/DeleteClassResponse")]
        System.Threading.Tasks.Task<bool> DeleteClassAsync(string ClassNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/AddCertificate", ReplyAction="http://tempuri.org/ICertMService/AddCertificateResponse")]
        string AddCertificate(System.Collections.Generic.List<string> CertificateContent, System.Collections.Generic.List<string> NameInformation, System.Collections.Generic.List<string> NameScore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/AddCertificate", ReplyAction="http://tempuri.org/ICertMService/AddCertificateResponse")]
        System.Threading.Tasks.Task<string> AddCertificateAsync(System.Collections.Generic.List<string> CertificateContent, System.Collections.Generic.List<string> NameInformation, System.Collections.Generic.List<string> NameScore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/ReadExcel", ReplyAction="http://tempuri.org/ICertMService/ReadExcelResponse")]
        System.Collections.Generic.List<string> ReadExcel(string NameTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/ReadExcel", ReplyAction="http://tempuri.org/ICertMService/ReadExcelResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> ReadExcelAsync(string NameTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/GetListTemplateName", ReplyAction="http://tempuri.org/ICertMService/GetListTemplateNameResponse")]
        System.Collections.Generic.List<CertMClient.CertMServiceData.TEMPLATE> GetListTemplateName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/GetListTemplateName", ReplyAction="http://tempuri.org/ICertMService/GetListTemplateNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<CertMClient.CertMServiceData.TEMPLATE>> GetListTemplateNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/createCertificateFromJson", ReplyAction="http://tempuri.org/ICertMService/createCertificateFromJsonResponse")]
        bool createCertificateFromJson(string jSon, System.Collections.Generic.List<string> certificateContent, int InformationCount, int NameScoreCount, string nameTemplate, string tempFolder, CertMClient.CertMServiceData.GeneratorExportOption option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/createCertificateFromJson", ReplyAction="http://tempuri.org/ICertMService/createCertificateFromJsonResponse")]
        System.Threading.Tasks.Task<bool> createCertificateFromJsonAsync(string jSon, System.Collections.Generic.List<string> certificateContent, int InformationCount, int NameScoreCount, string nameTemplate, string tempFolder, CertMClient.CertMServiceData.GeneratorExportOption option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/DownLoadFile", ReplyAction="http://tempuri.org/ICertMService/DownLoadFileResponse")]
        byte[] DownLoadFile(string session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/DownLoadFile", ReplyAction="http://tempuri.org/ICertMService/DownLoadFileResponse")]
        System.Threading.Tasks.Task<byte[]> DownLoadFileAsync(string session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/GetWorkingState", ReplyAction="http://tempuri.org/ICertMService/GetWorkingStateResponse")]
        CertMClient.CertMServiceData.WorkingState GetWorkingState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/GetWorkingState", ReplyAction="http://tempuri.org/ICertMService/GetWorkingStateResponse")]
        System.Threading.Tasks.Task<CertMClient.CertMServiceData.WorkingState> GetWorkingStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/Close", ReplyAction="http://tempuri.org/ICertMService/CloseResponse")]
        void Close();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/Close", ReplyAction="http://tempuri.org/ICertMService/CloseResponse")]
        System.Threading.Tasks.Task CloseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/AddAccount", ReplyAction="http://tempuri.org/ICertMService/AddAccountResponse")]
        bool AddAccount(CertMClient.CertMServiceData.ACCOUNT newaccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/AddAccount", ReplyAction="http://tempuri.org/ICertMService/AddAccountResponse")]
        System.Threading.Tasks.Task<bool> AddAccountAsync(CertMClient.CertMServiceData.ACCOUNT newaccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/CheckAccount", ReplyAction="http://tempuri.org/ICertMService/CheckAccountResponse")]
        bool CheckAccount(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/CheckAccount", ReplyAction="http://tempuri.org/ICertMService/CheckAccountResponse")]
        System.Threading.Tasks.Task<bool> CheckAccountAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/GetTypeAccount", ReplyAction="http://tempuri.org/ICertMService/GetTypeAccountResponse")]
        string GetTypeAccount(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/GetTypeAccount", ReplyAction="http://tempuri.org/ICertMService/GetTypeAccountResponse")]
        System.Threading.Tasks.Task<string> GetTypeAccountAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/AddAccountStudent", ReplyAction="http://tempuri.org/ICertMService/AddAccountStudentResponse")]
        void AddAccountStudent(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/AddAccountStudent", ReplyAction="http://tempuri.org/ICertMService/AddAccountStudentResponse")]
        System.Threading.Tasks.Task AddAccountStudentAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/getAccounts", ReplyAction="http://tempuri.org/ICertMService/getAccountsResponse")]
        System.Collections.Generic.List<CertMClient.CertMServiceData.ACCOUNT> getAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/getAccounts", ReplyAction="http://tempuri.org/ICertMService/getAccountsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<CertMClient.CertMServiceData.ACCOUNT>> getAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/modifyAccount", ReplyAction="http://tempuri.org/ICertMService/modifyAccountResponse")]
        void modifyAccount(CertMClient.CertMServiceData.ACCOUNT account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/modifyAccount", ReplyAction="http://tempuri.org/ICertMService/modifyAccountResponse")]
        System.Threading.Tasks.Task modifyAccountAsync(CertMClient.CertMServiceData.ACCOUNT account);
        
        // CODEGEN: Generating message contract since the operation UploadFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/UploadFile", ReplyAction="http://tempuri.org/ICertMService/UploadFileResponse")]
        CertMClient.CertMServiceData.UploadFileResponse UploadFile(CertMClient.CertMServiceData.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/UploadFile", ReplyAction="http://tempuri.org/ICertMService/UploadFileResponse")]
        System.Threading.Tasks.Task<CertMClient.CertMServiceData.UploadFileResponse> UploadFileAsync(CertMClient.CertMServiceData.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/CheckTemplateName", ReplyAction="http://tempuri.org/ICertMService/CheckTemplateNameResponse")]
        bool CheckTemplateName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/CheckTemplateName", ReplyAction="http://tempuri.org/ICertMService/CheckTemplateNameResponse")]
        System.Threading.Tasks.Task<bool> CheckTemplateNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/SaveToDatabase", ReplyAction="http://tempuri.org/ICertMService/SaveToDatabaseResponse")]
        bool SaveToDatabase(string name, string file1, string file2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/SaveToDatabase", ReplyAction="http://tempuri.org/ICertMService/SaveToDatabaseResponse")]
        System.Threading.Tasks.Task<bool> SaveToDatabaseAsync(string name, string file1, string file2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/GetEndFilePath", ReplyAction="http://tempuri.org/ICertMService/GetEndFilePathResponse")]
        string GetEndFilePath(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/GetEndFilePath", ReplyAction="http://tempuri.org/ICertMService/GetEndFilePathResponse")]
        System.Threading.Tasks.Task<string> GetEndFilePathAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/GetListCertOfClass", ReplyAction="http://tempuri.org/ICertMService/GetListCertOfClassResponse")]
        System.Collections.Generic.List<string> GetListCertOfClass(string classNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/GetListCertOfClass", ReplyAction="http://tempuri.org/ICertMService/GetListCertOfClassResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetListCertOfClassAsync(string classNo);
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (DownloadStudentCert)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/DownloadStudentCert", ReplyAction="http://tempuri.org/ICertMService/DownloadStudentCertResponse")]
        CertMClient.CertMServiceData.RemoteFileInfo DownloadStudentCert(CertMClient.CertMServiceData.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/DownloadStudentCert", ReplyAction="http://tempuri.org/ICertMService/DownloadStudentCertResponse")]
        System.Threading.Tasks.Task<CertMClient.CertMServiceData.RemoteFileInfo> DownloadStudentCertAsync(CertMClient.CertMServiceData.DownloadRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (DownloadClassCert)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/DownloadClassCert", ReplyAction="http://tempuri.org/ICertMService/DownloadClassCertResponse")]
        CertMClient.CertMServiceData.RemoteFileInfo DownloadClassCert(CertMClient.CertMServiceData.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertMService/DownloadClassCert", ReplyAction="http://tempuri.org/ICertMService/DownloadClassCertResponse")]
        System.Threading.Tasks.Task<CertMClient.CertMServiceData.RemoteFileInfo> DownloadClassCertAsync(CertMClient.CertMServiceData.DownloadRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(string FileName, long Length, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.Length = Length;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileResponse {
        
        public UploadFileResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Code;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string Code) {
            this.Code = Code;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICertMServiceChannel : CertMClient.CertMServiceData.ICertMService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CertMServiceClient : System.ServiceModel.ClientBase<CertMClient.CertMServiceData.ICertMService>, CertMClient.CertMServiceData.ICertMService {
        
        public CertMServiceClient() {
        }
        
        public CertMServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CertMServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CertMServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CertMServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int SizePageSearch(int Option, string Value, string Rank, string Place, int PageSize) {
            return base.Channel.SizePageSearch(Option, Value, Rank, Place, PageSize);
        }
        
        public System.Threading.Tasks.Task<int> SizePageSearchAsync(int Option, string Value, string Rank, string Place, int PageSize) {
            return base.Channel.SizePageSearchAsync(Option, Value, Rank, Place, PageSize);
        }
        
        public System.Collections.Generic.List<CertMClient.CertMServiceData.CERTIFICATE> SearchCert(int Option, string Value, string Rank, string Place, int Page, int PageSize) {
            return base.Channel.SearchCert(Option, Value, Rank, Place, Page, PageSize);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<CertMClient.CertMServiceData.CERTIFICATE>> SearchCertAsync(int Option, string Value, string Rank, string Place, int Page, int PageSize) {
            return base.Channel.SearchCertAsync(Option, Value, Rank, Place, Page, PageSize);
        }
        
        public System.Collections.Generic.List<CertMClient.CertMServiceData.SCOREBOARD> GetScoreBoard(string CertNo) {
            return base.Channel.GetScoreBoard(CertNo);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<CertMClient.CertMServiceData.SCOREBOARD>> GetScoreBoardAsync(string CertNo) {
            return base.Channel.GetScoreBoardAsync(CertNo);
        }
        
        public bool DeleteClass(string ClassNo) {
            return base.Channel.DeleteClass(ClassNo);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClassAsync(string ClassNo) {
            return base.Channel.DeleteClassAsync(ClassNo);
        }
        
        public string AddCertificate(System.Collections.Generic.List<string> CertificateContent, System.Collections.Generic.List<string> NameInformation, System.Collections.Generic.List<string> NameScore) {
            return base.Channel.AddCertificate(CertificateContent, NameInformation, NameScore);
        }
        
        public System.Threading.Tasks.Task<string> AddCertificateAsync(System.Collections.Generic.List<string> CertificateContent, System.Collections.Generic.List<string> NameInformation, System.Collections.Generic.List<string> NameScore) {
            return base.Channel.AddCertificateAsync(CertificateContent, NameInformation, NameScore);
        }
        
        public System.Collections.Generic.List<string> ReadExcel(string NameTemplate) {
            return base.Channel.ReadExcel(NameTemplate);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> ReadExcelAsync(string NameTemplate) {
            return base.Channel.ReadExcelAsync(NameTemplate);
        }
        
        public System.Collections.Generic.List<CertMClient.CertMServiceData.TEMPLATE> GetListTemplateName() {
            return base.Channel.GetListTemplateName();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<CertMClient.CertMServiceData.TEMPLATE>> GetListTemplateNameAsync() {
            return base.Channel.GetListTemplateNameAsync();
        }
        
        public bool createCertificateFromJson(string jSon, System.Collections.Generic.List<string> certificateContent, int InformationCount, int NameScoreCount, string nameTemplate, string tempFolder, CertMClient.CertMServiceData.GeneratorExportOption option) {
            return base.Channel.createCertificateFromJson(jSon, certificateContent, InformationCount, NameScoreCount, nameTemplate, tempFolder, option);
        }
        
        public System.Threading.Tasks.Task<bool> createCertificateFromJsonAsync(string jSon, System.Collections.Generic.List<string> certificateContent, int InformationCount, int NameScoreCount, string nameTemplate, string tempFolder, CertMClient.CertMServiceData.GeneratorExportOption option) {
            return base.Channel.createCertificateFromJsonAsync(jSon, certificateContent, InformationCount, NameScoreCount, nameTemplate, tempFolder, option);
        }
        
        public byte[] DownLoadFile(string session) {
            return base.Channel.DownLoadFile(session);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownLoadFileAsync(string session) {
            return base.Channel.DownLoadFileAsync(session);
        }
        
        public CertMClient.CertMServiceData.WorkingState GetWorkingState() {
            return base.Channel.GetWorkingState();
        }
        
        public System.Threading.Tasks.Task<CertMClient.CertMServiceData.WorkingState> GetWorkingStateAsync() {
            return base.Channel.GetWorkingStateAsync();
        }
        
        public void Close() {
            base.Channel.Close();
        }
        
        public System.Threading.Tasks.Task CloseAsync() {
            return base.Channel.CloseAsync();
        }
        
        public bool AddAccount(CertMClient.CertMServiceData.ACCOUNT newaccount) {
            return base.Channel.AddAccount(newaccount);
        }
        
        public System.Threading.Tasks.Task<bool> AddAccountAsync(CertMClient.CertMServiceData.ACCOUNT newaccount) {
            return base.Channel.AddAccountAsync(newaccount);
        }
        
        public bool CheckAccount(string email) {
            return base.Channel.CheckAccount(email);
        }
        
        public System.Threading.Tasks.Task<bool> CheckAccountAsync(string email) {
            return base.Channel.CheckAccountAsync(email);
        }
        
        public string GetTypeAccount(string email) {
            return base.Channel.GetTypeAccount(email);
        }
        
        public System.Threading.Tasks.Task<string> GetTypeAccountAsync(string email) {
            return base.Channel.GetTypeAccountAsync(email);
        }
        
        public void AddAccountStudent(string email) {
            base.Channel.AddAccountStudent(email);
        }
        
        public System.Threading.Tasks.Task AddAccountStudentAsync(string email) {
            return base.Channel.AddAccountStudentAsync(email);
        }
        
        public System.Collections.Generic.List<CertMClient.CertMServiceData.ACCOUNT> getAccounts() {
            return base.Channel.getAccounts();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<CertMClient.CertMServiceData.ACCOUNT>> getAccountsAsync() {
            return base.Channel.getAccountsAsync();
        }
        
        public void modifyAccount(CertMClient.CertMServiceData.ACCOUNT account) {
            base.Channel.modifyAccount(account);
        }
        
        public System.Threading.Tasks.Task modifyAccountAsync(CertMClient.CertMServiceData.ACCOUNT account) {
            return base.Channel.modifyAccountAsync(account);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CertMClient.CertMServiceData.UploadFileResponse CertMClient.CertMServiceData.ICertMService.UploadFile(CertMClient.CertMServiceData.RemoteFileInfo request) {
            return base.Channel.UploadFile(request);
        }
        
        public void UploadFile(string FileName, long Length, System.IO.Stream FileByteStream) {
            CertMClient.CertMServiceData.RemoteFileInfo inValue = new CertMClient.CertMServiceData.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            CertMClient.CertMServiceData.UploadFileResponse retVal = ((CertMClient.CertMServiceData.ICertMService)(this)).UploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CertMClient.CertMServiceData.UploadFileResponse> CertMClient.CertMServiceData.ICertMService.UploadFileAsync(CertMClient.CertMServiceData.RemoteFileInfo request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<CertMClient.CertMServiceData.UploadFileResponse> UploadFileAsync(string FileName, long Length, System.IO.Stream FileByteStream) {
            CertMClient.CertMServiceData.RemoteFileInfo inValue = new CertMClient.CertMServiceData.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            return ((CertMClient.CertMServiceData.ICertMService)(this)).UploadFileAsync(inValue);
        }
        
        public bool CheckTemplateName(string name) {
            return base.Channel.CheckTemplateName(name);
        }
        
        public System.Threading.Tasks.Task<bool> CheckTemplateNameAsync(string name) {
            return base.Channel.CheckTemplateNameAsync(name);
        }
        
        public bool SaveToDatabase(string name, string file1, string file2) {
            return base.Channel.SaveToDatabase(name, file1, file2);
        }
        
        public System.Threading.Tasks.Task<bool> SaveToDatabaseAsync(string name, string file1, string file2) {
            return base.Channel.SaveToDatabaseAsync(name, file1, file2);
        }
        
        public string GetEndFilePath(string name) {
            return base.Channel.GetEndFilePath(name);
        }
        
        public System.Threading.Tasks.Task<string> GetEndFilePathAsync(string name) {
            return base.Channel.GetEndFilePathAsync(name);
        }
        
        public System.Collections.Generic.List<string> GetListCertOfClass(string classNo) {
            return base.Channel.GetListCertOfClass(classNo);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetListCertOfClassAsync(string classNo) {
            return base.Channel.GetListCertOfClassAsync(classNo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CertMClient.CertMServiceData.RemoteFileInfo CertMClient.CertMServiceData.ICertMService.DownloadStudentCert(CertMClient.CertMServiceData.DownloadRequest request) {
            return base.Channel.DownloadStudentCert(request);
        }
        
        public string DownloadStudentCert(string Code, out long Length, out System.IO.Stream FileByteStream) {
            CertMClient.CertMServiceData.DownloadRequest inValue = new CertMClient.CertMServiceData.DownloadRequest();
            inValue.Code = Code;
            CertMClient.CertMServiceData.RemoteFileInfo retVal = ((CertMClient.CertMServiceData.ICertMService)(this)).DownloadStudentCert(inValue);
            Length = retVal.Length;
            FileByteStream = retVal.FileByteStream;
            return retVal.FileName;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CertMClient.CertMServiceData.RemoteFileInfo> CertMClient.CertMServiceData.ICertMService.DownloadStudentCertAsync(CertMClient.CertMServiceData.DownloadRequest request) {
            return base.Channel.DownloadStudentCertAsync(request);
        }
        
        public System.Threading.Tasks.Task<CertMClient.CertMServiceData.RemoteFileInfo> DownloadStudentCertAsync(string Code) {
            CertMClient.CertMServiceData.DownloadRequest inValue = new CertMClient.CertMServiceData.DownloadRequest();
            inValue.Code = Code;
            return ((CertMClient.CertMServiceData.ICertMService)(this)).DownloadStudentCertAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CertMClient.CertMServiceData.RemoteFileInfo CertMClient.CertMServiceData.ICertMService.DownloadClassCert(CertMClient.CertMServiceData.DownloadRequest request) {
            return base.Channel.DownloadClassCert(request);
        }
        
        public string DownloadClassCert(string Code, out long Length, out System.IO.Stream FileByteStream) {
            CertMClient.CertMServiceData.DownloadRequest inValue = new CertMClient.CertMServiceData.DownloadRequest();
            inValue.Code = Code;
            CertMClient.CertMServiceData.RemoteFileInfo retVal = ((CertMClient.CertMServiceData.ICertMService)(this)).DownloadClassCert(inValue);
            Length = retVal.Length;
            FileByteStream = retVal.FileByteStream;
            return retVal.FileName;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CertMClient.CertMServiceData.RemoteFileInfo> CertMClient.CertMServiceData.ICertMService.DownloadClassCertAsync(CertMClient.CertMServiceData.DownloadRequest request) {
            return base.Channel.DownloadClassCertAsync(request);
        }
        
        public System.Threading.Tasks.Task<CertMClient.CertMServiceData.RemoteFileInfo> DownloadClassCertAsync(string Code) {
            CertMClient.CertMServiceData.DownloadRequest inValue = new CertMClient.CertMServiceData.DownloadRequest();
            inValue.Code = Code;
            return ((CertMClient.CertMServiceData.ICertMService)(this)).DownloadClassCertAsync(inValue);
        }
    }
}
